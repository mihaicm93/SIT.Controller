@page "/leaderboard"
@inject GameProfileService GameProfileService

<h1>Leaderboard</h1>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Light" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <div class="mt-3">
        <div class="table-responsive" style="border-radius: 10px; overflow:auto; opacity: 0.8; backdrop-filter: blur(2px);">
            <table class="table table-hover" style="border-radius: 10px; border-color: #191919; background-color: #191919;">
                <thead class="table">
                    <tr style="text-align: center;">
                        <th style="color: white;">Rank</th>
                        <th style="color: white;">Username</th>
                        <th style="color: white;">Level</th>
                        <th style="color: white;">Experience</th>
                        <th style="color: white;">Side</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var profile in profiles)
                    {
                        <tr>
                            <td style="text-align: center; color: white; vertical-align: middle;">@profile.Rank</td>
                            <td style="text-align: center; color: white; vertical-align: middle;">@profile.Username</td>
                            <td style="text-align: center; color: white; vertical-align: middle;">@profile.Level</td>
                            <td style="text-align: center; color: white; vertical-align: middle;">@profile.Experience</td>
                            <td style="text-align: center; color: white; vertical-align: middle;">@profile.Side</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

}

@code {
    private List<GameProfileViewModel> profiles;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        profiles = await LoadLeaderboardAsync();
        isLoading = false;
    }

    private async Task<List<GameProfileViewModel>> LoadLeaderboardAsync()
    {
        await Task.Delay(1000);

        var leaderboard = new List<GameProfileViewModel>();

        try
        {
            var allProfiles = await GameProfileService.SearchProfilesByUsernameAsync("");

            allProfiles = allProfiles.OrderByDescending(p => p.pmc.Level)
                                     .ThenByDescending(p => p.pmc.Experience)
                                     .ToList();

            int rank = 1;
            foreach (var profile in allProfiles)
            {
                leaderboard.Add(new GameProfileViewModel
                    {
                        Rank = rank++,
                        Username = profile.info.username,
                        Level = profile.pmc.Level,
                        Experience = profile.pmc.Experience,
                        Side = profile.pmc.Side
                    });
            }
        }
        catch (Exception ex)
        {
            // Handle exception or logging
            Console.WriteLine($"Error loading leaderboard: {ex.Message}");
        }
        return leaderboard;
    }

    public class GameProfileViewModel
    {
        public int Rank { get; set; }
        public string Username { get; set; }
        public int Level { get; set; }
        public int Experience { get; set; }
        public string Side { get; set; }
    }
}
