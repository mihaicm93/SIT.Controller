@page "/controllersettings"
@inject RegistrationStateService RegistrationStateService

<PageTitle>Controller Settings</PageTitle>

<h1>Controller Settings</h1>

<p>Welcome to the SIT.Controller Management Dashboard. From this interface you can change different settings related to the Web Application.</p>

<SurveyPrompt Title="Tell us how this tool is helping you manage your server!" />

<hr>
<Card Color="CardColor.Light" Class="mb-4" Style="max-width:32rem;">
    <CardHeader>REGISTRATIONS</CardHeader>
    <CardBody>
        <CardText>Here you can enable and disable the registration of new accounts</CardText>
        <p>
            Currently Registrations are :
            <button class="btn @(RegistrationStateService.RegistrationEnabled ? "btn-success" : "btn-danger")" @onclick="ToggleRegistration">
                @if (RegistrationStateService.RegistrationEnabled)
                {
                    <span>Enabled</span>
                }
                else
                {
                    <span>Disabled</span>
                }
            </button>
        </p>
        <hr>
        <div class="form-group">
            <label for="requiredLength">Required Password Length:</label>
            <input type="number" style="max-width:100px" class="form-control" id="requiredLength" @bind="RegistrationStateService.PasswordOptions.RequiredLength" min="6" max="30" oninput="validity.valid||(value=>'');" />
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="requireNonAlphanumeric" @bind="RegistrationStateService.PasswordOptions.RequireNonAlphanumeric" />
            <label class="form-check-label" for="requireNonAlphanumeric">Require non-alphanumeric character</label>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="requireLowercase" @bind="RegistrationStateService.PasswordOptions.RequireLowercase" />
            <label class="form-check-label" for="requireLowercase">Require lowercase character</label>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="requireUppercase" @bind="RegistrationStateService.PasswordOptions.RequireUppercase" />
            <label class="form-check-label" for="requireUppercase">Require uppercase character</label>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="requireDigit" @bind="RegistrationStateService.PasswordOptions.RequireDigit" />
            <label class="form-check-label" for="requireDigit">Require digit</label>
        </div>
        <button class="btn btn-secondary mt-3" @onclick="UpdatePasswordOptions">
            <i class="bi bi-floppy"></i>
            Update Password Requirements
        </button>
        @if(showConfirmation)
        {
            <div class="alert alert-success mt-3" role="alert">
                Password requirements updated successfully.
            </div>
        }
    </CardBody>
</Card>
<hr>

@code {
    private bool showConfirmation = false;

    private void ToggleRegistration()
    {
        RegistrationStateService.ToggleRegistration();
    }

    private async Task UpdatePasswordOptions()
    {
        RegistrationStateService.UpdatePasswordOptions(RegistrationStateService.PasswordOptions);
        showConfirmation = true;

        await Task.Delay(3000);
        showConfirmation = false;
    }
}
