@page "/usersmanager"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalhostService LocalhostService

<PageTitle>Users Manager</PageTitle>

<h1>Web Application User Manager</h1>

<p>This page allows you to manage users' access to the web application and remove them.</p>

<!-- User table -->
<div class="table-responsive" style="border-radius: 10px; overflow: hidden; opacity: 80%; backdrop-filter:blur(2px) ">
    <table class="table table-striped table-hover" style="border-radius: 10px; border-color: #191919;background-color: #191919;">
        <thead class="thead-dark">
            <tr style="text-align: center;">
                <th style=" color:white">User</th>
                <th style=" color:white">Roles</th>
                <th style=" color:white"></th>
            </tr>
        </thead>
        <tbody>
            @if (users != null)
            {
                @foreach (var user in users)
                {
                    <tr>
                        <td style="text-align: center; color:white; vertical-align: middle">@user.Email</td>
                        <td style="text-align: center; color:white ;vertical-align: middle">@string.Join(", ", userRoles[user.Id])</td>
                        <td style="text-align: center; color:white ;vertical-align: middle">
                            <button class="btn btn-secondary" @onclick="() => ShowEditRolesDialog(user)">Edit</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- Role edit modal -->
@if (selectedUser != null)
{
    <div class="modal show d-block" style="background-color: rgba(0, 0, 0, 0.5); backdrop-filter:blur(2px); " tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="border-bottom-color:#5B5B5B">
                    <h5 class="modal-title">Edit Roles for @selectedUser.Email</h5>
                </div>
                <div class="modal-body" style="display:inline; margin:auto; ">
                    @foreach (var role in allRoles)
                    {
                            <input class="btn-check" type="checkbox" id="@($"checkbox-{role.Name}")" @bind="role.IsSelected" @bind:event="onchange">
                        <label class="form-check-label btn btn-outline-secondary" style="width:130px; color:lightgray" for="@($"checkbox-{role.Name}")">@role.Name</label>
                    }
                </div>
                <div class="modal-footer" style="border-top-color:#5B5B5B">
                    <div class="me-auto">
                        <button class="btn btn-danger" @onclick="() => DeleteUser(selectedUser)">Delete User</button>
                    </div>
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditRolesDialog">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="SaveRoles">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<IdentityUser> users;
    private Dictionary<string, List<string>> userRoles = new Dictionary<string, List<string>>();
    private IdentityUser selectedUser;
    private List<RoleViewModel> allRoles;

    // Initialization method
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load all users
            users = await UserManager.Users.ToListAsync();

            // Load all roles and prepare the view model
            allRoles = await RoleManager.Roles.Select(role => new RoleViewModel { Name = role.Name }).ToListAsync();

            // Load roles for each user
            foreach (var user in users)
            {
                var roles = await UserManager.GetRolesAsync(user);
                userRoles[user.Id] = roles.ToList();
            }
        }
        catch (Exception ex)
        {
            // Handle initialization errors
            Console.Error.WriteLine($"Error loading users and roles: {ex.Message}");
        }
    }

    // Show the role edit dialog
    private async Task ShowEditRolesDialog(IdentityUser user)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.IsInRole("Administrator") || currentUser.IsInRole("Superuser") || LocalhostService.IsLocalhost())
        {
            selectedUser = user;
            var userRoles = await UserManager.GetRolesAsync(user);

            foreach (var role in allRoles)
            {
                role.IsSelected = userRoles.Contains(role.Name);
            }
        }
        else
        {
            Console.Error.WriteLine("Access denied. User does not have the required roles.");
        }
    }

    // Close the role edit dialog
    private void CloseEditRolesDialog()
    {
        selectedUser = null;
    }

    // Save the roles for the selected user
    private async Task SaveRoles()
    {
        try
        {
            var userRoles = await UserManager.GetRolesAsync(selectedUser);
            var rolesToAdd = allRoles.Where(r => r.IsSelected && !userRoles.Contains(r.Name)).Select(r => r.Name).ToList();
            var rolesToRemove = userRoles.Where(r => !allRoles.Any(ar => ar.IsSelected && ar.Name == r)).ToList();

            if (rolesToAdd.Any())
            {
                await UserManager.AddToRolesAsync(selectedUser, rolesToAdd);
            }

            if (rolesToRemove.Any())
            {
                await UserManager.RemoveFromRolesAsync(selectedUser, rolesToRemove);
            }

            // Update local userRoles dictionary
            this.userRoles[selectedUser.Id] = (await UserManager.GetRolesAsync(selectedUser)).ToList();

            selectedUser = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle save errors
            Console.Error.WriteLine($"Error saving roles: {ex.Message}");
        }
    }

    // Delete the specified user
    private async Task DeleteUser(IdentityUser user)
    {
        try
        {
            var result = await UserManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                // Check if the user is signed in
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var currentUser = authState.User;

                if (SignInManager.IsSignedIn(currentUser) && currentUser.Identity.Name == user.UserName)
                {
                    // Sign out the user
                    await SignInManager.SignOutAsync();
                }

                users.Remove(user);
                userRoles.Remove(user.Id);
                StateHasChanged();
                CloseEditRolesDialog();
            }
            else
            {
                // Handle errors
                Console.Error.WriteLine($"Error deleting user: {string.Join(", ", result.Errors.Select(e => e.Description))}");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.Error.WriteLine($"Exception deleting user: {ex.Message}");
        }
    }

    // View model for roles
    private class RoleViewModel
    {
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }
}
