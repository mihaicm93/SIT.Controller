@inject Controllers.ServerManager serverManager

<div class="server-status">
    @if (isLoading)
    {
        <div class="spinner-border text-primary" role="status" style="background-color: white">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <div style="background-color: white" class="server-indicator @(isServerRunning ? "server-online" : "server-offline")">
            @(isServerRunning ? "Game Server Online" : "Game Server Offline")
        </div>
    }
    <button style="background-color: white" class="btn btn-link" @onclick="OnRefreshClick">Refresh</button>
</div>

@code {
    private bool isLoading = false;
    private bool isServerRunning = false;

    private async Task CheckServerStatusAsync()
    {
        isLoading = true;
        StateHasChanged();

        // Simulate server check delay
        await Task.Delay(2000);

        // Check server status (replace with actual server check logic)
        isServerRunning = serverManager.IsServerRunning();

        isLoading = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckServerStatusAsync();
    }

    private async Task OnRefreshClick()
    {
        await CheckServerStatusAsync();
    }
}
